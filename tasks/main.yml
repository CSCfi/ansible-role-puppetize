---
- name: Install Puppet
  include_tasks: "install_{{ ansible_os_family }}.yml"

- name: Check if puppet.conf contains environment
  command: "grep environment {{ puppet_etc_dir }}/puppet.conf"
  register: puppet_file_content
  failed_when: puppet_file_content.rc > 1
  tags: ['configure_puppet_client', 'testing']
  changed_when: False
  check_mode: no

- name: Fail if developments is run against test or production
  fail:
    msg: 'Development environment is not allowed to run against test or production'
  tags: ['configure_puppet_client', 'testing' ]
  when:
    - puppet_environment != "production"
    - puppet_environment != "test"
    - puppet_file_content.stdout is search('test') or puppet_file_content.stdout is search('production')
    - puppet_file_content.rc == 0

- name: Fail when test or production is run against wrong environment
  fail:
    msg: "{{ puppet_environment }} is apparently not allowed to be ran against this node"
  tags: ['configure_puppet_client', 'testing']
  when:
    - puppet_environment not in puppet_file_content.stdout
    - puppet_environment == "production" or puppet_environment == "test"
    - puppet_file_content.rc == 0

- name: template in puppet config
  template:
    src: "puppet.conf.j2"
    dest: "{{ puppet_etc_dir }}/puppet.conf"
  tags: ['configure_puppet_client']

  # If this takes longer than 60s (value of puppetize_time_difference) the fail: task below would give a false-negative error.
- name: grab ansible_date_time from puppetmaster
  setup:
    gather_subset: min
    filter: "ansible_date_time*"
  register: reg_puppetmaster_facts
  remote_user: "{{ lookup('env', 'USER') }}"
  become: true
  delegate_to: "{{ puppetmaster }}"
  delegate_facts: True
  when: not puppet_run_only

- name: set epoch time + {{ puppetize_time_difference }}s as my_puppetize_time
  set_fact:
    my_puppetize_time: "{{ ansible_date_time.epoch|int + puppetize_time_difference }}"
  when: not puppet_run_only

- name: We do not want to create a certificate that is not valid until time has caught up with time on the puppetmaster
  fail:
    msg: |
      Time is too much in the past on the agent ({{ my_puppetize_time }} vs {{ reg_puppetmaster_facts.ansible_facts.ansible_date_time.epoch }})
      Fail before we create a certificate on the puppet agent
  when:
# Order matters
    - reg_puppetmaster_facts is defined
    - reg_puppetmaster_facts.ansible_facts is defined
    - not puppet_run_only
    - my_puppetize_time < reg_puppetmaster_facts.ansible_facts.ansible_date_time.epoch

- name: request cert to be signed on puppetmaster
  command: "{{ puppet_agent_bin_path }} agent --test --noop"
  register: puppet_result
  args:
    creates: "{{ puppet_cert_request_path }}/{{ inventory_hostname }}.pem"
  failed_when: (puppet_result.rc != 1) and (puppet_result.rc != 0)
  tags: ['puppet_cert_bootstrap']
  when: not puppet_run_only

- name: sign cert on puppetmaster
  command: "{{ puppet_agent_bin_path }} cert sign {{ inventory_hostname }}"
  remote_user: "{{ lookup('env', 'USER') }}"
  become: true
  become_user: root
  args:
    removes: "{{ puppet_ca_request_path }}/{{ inventory_hostname }}.pem"
  delegate_to: "{{ puppetmaster }}"
  tags: ['puppet_cert_bootstrap']
  when: not puppet_run_only

- name: enable puppet agent
  command: "{{ puppet_agent_bin_path }} agent --enable"
  when: puppetize_enable_puppet

- name: Dry run (no changes, depending on the puppet code) of Puppet
  command: "{{ puppet_agent_bin_path }} agent -t --noop"
  register: dry_puppet_result
  changed_when: dry_puppet_result.rc == 2
  failed_when: (dry_puppet_result.rc != 2) and (dry_puppet_result.rc != 0)
  tags: [ 'puppet_run', 'skip_ansible_lint' ]
  when: noop_run|bool

- name: Show output
  debug:
    var: dry_puppet_result['stdout_lines']
  when: noop_run|bool

- name: puppetize!
  command: "{{ puppet_agent_bin_path }} agent -t"
  register: puppet_result
  changed_when: puppet_result.rc == 2
  failed_when: (puppet_result.rc != 2) and (puppet_result.rc != 0)
  tags: [ 'puppet_run', 'skip_ansible_lint' ]
  when: not noop_run|bool

- name: Show output if it's not a clean run
  debug:
    var: puppet_result['stdout_lines']
  when:
    - not noop_run|bool
    - puppet_result.rc != 0
    - puppet_result.rc != 2
...